<?xml version="1.0"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       https://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--
   This is not the original file distributed by the Apache Software Foundation
   It has been modified by the Hipparchus project
-->

<ruleset name="hipparchus-customized"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.github.io/ruleset_2_0_0.xsd">
  <description>
    This ruleset checks the code for discouraged programming constructs.
  </description>

  <rule ref="category/java/errorprone.xml">

    <exclude name="AvoidLiteralsInIfCondition"/>
    <exclude name="AvoidFieldNameMatchingMethodName"/>
    <exclude name="NullAssignment"/>
    <exclude name="ConstructorCallsOverridableMethod"/>
    <exclude name="CompareObjectsWithEquals"/>

    <!-- TODO: we should reactivate this rule -->
    <exclude name="CloneMethodMustImplementCloneable"/>

  </rule>

  <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals">
    <properties>
      <property name="skipAnnotations" value="true"/>
    </properties>
  </rule>

  <rule ref="category/java/multithreading.xml">

    <!-- PMD default rule for ConcurrentHashMap are too restrictive,
         it considers *all* usages of HashMap should be replaced,
         regardless of the map being a local variable or field, in
         a class documented to be non-thread safe or not, with
         surrounding synchronize block or not -->
    <exclude name="UseConcurrentHashMap"/>

  </rule>

  <rule ref="category/java/bestpractices.xml">

    <exclude name="AccessorClassGeneration"/>
    <exclude name="AccessorMethodGeneration"/>
    <exclude name="AvoidReassigningParameters"/>
    <exclude name="AvoidReassigningLoopVariables"/>
    <exclude name="ForLoopCanBeForeach"/>

    <!-- Many classes have many features -->
    <exclude name="LooseCoupling"/>

    <!-- in mathematics, arrays are first-class citizens, they don't always serve the same purpose as varargs -->
    <exclude name="UseVarargs"/>

    <!-- PMD confuses our mathematical vectors with Java Vector class -->
    <exclude name="ReplaceVectorWithList"/>

  </rule>

  <rule ref="category/java/codestyle.xml">

    <!-- In many places in Hipparchus, there are complex boolean expressions.
         We do use extra parentheses there as most people do not recall operator precedence,
         this means even if the parentheses are useless for the compiler, we don't consider
         them useless for the developer. This is the reason why we disable this rule. -->
    <exclude name="UselessParentheses"/>

    <!-- In complex algorithms, in iterations, or for efficiency with shortcut returns,
         it makes sense to have more than one return. -->
    <exclude name="OnlyOneReturn"/>

    <!-- in mathematics, short names are not a problem -->
    <exclude name="ShortVariable"/>
    <exclude name="ShortClassName"/>
    <exclude name="ShortMethodName"/>

    <!-- on the other hand, we also love long names... -->
    <exclude name="LongVariable"/>

    <!-- We should really activate these rules, but it is a tremendous amount of changes! -->
    <exclude name="MethodArgumentCouldBeFinal"/>
    <exclude name="LocalVariableCouldBeFinal"/>

    <!-- Many mathematical classes have no fields at all, so we don't set up empty constructors -->
    <exclude name="AtLeastOneConstructor"/>

    <exclude name="ClassNamingConventions"/>
    <exclude name="LocalVariableNamingConventions"/>
    <exclude name="FieldNamingConventions"/>
    <exclude name="MethodNamingConventions"/>
    <exclude name="FormalParameterNamingConventions"/>
    <exclude name="ConfusingTernary"/>
    <exclude name="CommentDefaultAccessModifier"/>
    <exclude name="PrematureDeclaration"/>
    <exclude name="CallSuperInConstructor"/>
    <exclude name="UseUnderscoresInNumericLiterals"/>

  </rule>

  <rule ref="category/java/performance.xml">
    <exclude name="AvoidArrayLoops"/>
    <exclude name="AvoidInstantiatingObjectsInLoops"/>
  </rule>

  <rule ref="category/java/design.xml">
    <!-- At several places in the optimization package, we set up public "optimize" methods
         that simply call their base class optimize method. This is intentional and allows
         to update the javadoc and make sure the additional parameters implemented at the
         lower class level are properly documented. These new parameters are really taken
         into accound despite we merely call super.optimize because the top level optimze
         methods call a protected parseOptimizationData method implemented in the specialized
         class. This is the reason why we disable this rule. -->
    <exclude name="UselessOverridingMethod"/>

    <!-- Law of Demeter forbid chain calls, which Hipparchus use a lot,
         for example getCompiler().subtract() in DerivativeStructure -->
    <exclude name="LawOfDemeter"/>

    <!-- All implementations of CalculusFieldElement *needs* to have many methods. -->
    <exclude name="ExcessivePublicCount"/>
    <exclude name="ExcessiveImports"/>
    <exclude name="TooManyMethods"/>
    <exclude name="TooManyFields"/>

    <!-- Many utility classes as well as linear algebra classes (matrices and vectors) have many features -->
    <exclude name="GodClass"/>
    <exclude name="CouplingBetweenObjects"/>

    <!-- Some classes are intentionally DataClass, they are for example used to return several related values together -->
    <exclude name="DataClass"/>

    <!-- Lots of reference algorithms have a high complexity -->
    <exclude name="CognitiveComplexity"/>
    <exclude name="CyclomaticComplexity"/>
    <exclude name="NPathComplexity"/>
    <exclude name="NcssCount"/>
    <exclude name="ExcessiveParameterList"/>

    <exclude name="ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
    <exclude name="AvoidUncheckedExceptionsInSignatures"/>

    <!-- This is a library, its classes are intended to be used from outside -->
    <exclude name="LoosePackageCoupling" />

    <!-- the library intentionally checks for some explicit null objects and uses standard exception for this -->
    <exclude name="AvoidThrowingNullPointerException"/>

    <!-- TODO: we should reactivate these rules -->
    <exclude name="ImmutableField"/>
    <exclude name="SimplifyBooleanReturns"/>

  </rule>

  <rule ref="category/java/design.xml/SwitchDensity">
    <properties>
      <property name="minimum" value="20"/>
    </properties>
  </rule>

  <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts">
    <properties>
      <property name="problemDepth" value="4"/>
    </properties>
  </rule>

  <rule ref="category/java/documentation.xml">
    <exclude name="UncommentedEmptyMethodBody"/>
  </rule>

  <rule ref="category/java/documentation.xml/CommentSize">
    <properties>
      <property name="maxLines"      value="200"/>
      <property name="maxLineLength" value="256"/>
    </properties>
  </rule>

</ruleset>
